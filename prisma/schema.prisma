// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Default base type for all models
//    id       String   @id @default(uuid())
//    createdAt DateTime @default(now())
//    updatedAt DateTime @updatedAt
//    isActive  Boolean  @default(true)
//    isDeleted Boolean  @default(false)
//    deletedAt DateTime?

enum Role {
  ADMIN
  STAFF
  USER
}

// User Model
model Group {
  slug    String    @id
  name    String
  kind    String
  private Boolean
  Profile Profile[] @relation("ProfileGroup")
}

model Profile {
  preferred_username String        @id
  created_at         DateTime      @default(now())
  updated_at         DateTime      @updatedAt
  isActive           Boolean       @default(true)
  isDeleted          Boolean       @default(false)
  deletedAt          DateTime?
  given_name         String
  family_name        String
  nickname           String
  name               String
  zoneinfo           String
  uid                Int
  gid                Int
  graduation_years   Int[]
  sessions           Session[]
  groups             Group[]       @relation("ProfileGroup")
  roles              Role[]        @default([USER])
  PlaceProfile       PlaceProfile?
  usedQRCodes        QRCode[]      @relation("UsedQRCode")
}

model Session {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  isActive     Boolean   @default(true)
  isDeleted    Boolean   @default(false)
  deletedAt    DateTime?
  profile      Profile   @relation(fields: [login], references: [preferred_username])
  login        String
  accessToken  String
  refreshToken String?
  expiresAt    DateTime
}

// EPlace Model
model PlaceProfile {
  profile     Profile    @relation(fields: [login], references: [preferred_username])
  login       String     @unique
  tilesPlaced Int        @default(0)
  lastPlaced  DateTime   @updatedAt
  tiles       TileInfo[]
}

model Tile {
  i     Int    @id
  color String
}

model TileInfo {
  id           String       @id @default(uuid())
  i            Int
  color        String
  placedAt     DateTime     @default(now())
  placeProfile PlaceProfile @relation(fields: [login], references: [login])
  login        String
}

// QR Codes Model
model QRCode {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isActive   Boolean   @default(true)
  isDeleted  Boolean   @default(false)
  deletedAt  DateTime?
  usedBy     Profile[] @relation("UsedQRCode")
  usedAt     DateTime?
  maxUses    Int       @default(0) // 0 = unlimited
  activityId Int
  points     Int
}

// Events Model
model Event {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?
  name        String
  description String
  startTime   DateTime
  endTime     DateTime
  location    String
}

model Announcement {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?
  title       String
  description String
  link        String?
  image       String?
}
